*** Arithmetic Functions
| +    | addition       |
| -    | subtraction    |
| *    | multiplication |
| /    | division       |
| abs  | absolute value |
| sqrt | square root    |

*** Predicates
| numberp | is a number?                 |
| symbolp | is a symbol?                 |
| zerop   | is zero?                     |
| oddp    | is odd?                      |
| evenp   | is even?                     |
| <       | is less than?                |
| >       | is greater than?             |
| equal   | are equal?                   |
| not     | flip boolean value           |
| listp   | is a list?                   |
| consp   | is a cons cell?              |
| atom    | is atomic (number or symbol) |
| null    | is null?                     |
| plusp   | is positive?                 |

*** List Functions
| first  | first element                              |
| second | second element                             |
| third  | third element                              |
| fourth | fourth element                             |
| rest   | all elements except the first              |
| car    | analogous to first                         |
| cdr    | analogous to rest                          |
| cons   | create a cons cell with car and cdr inputs |
| list   | create a list containing the inputs        |
| length | length of a list                           |

*** Conditionals
| if   | 3 clauses: test statement, consequence, else      |
| cond | like a switch statement and can have many clauses |
| and  | returns NIL or the last non-NIL value             |
| or   | returns the first non-NIL value or NIL.           |

*** Creating local variables
| let  | create local variable(s) in a new lexical scope            |
| let* | like let, but required if variables have interdependencies |

*** Assignment
| setf | assign values to variables |

*** Defining a function
(defun name (args) body)
