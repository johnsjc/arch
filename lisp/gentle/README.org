*** Arithmetic Functions
| +    | addition       |
| -    | subtraction    |
| *    | multiplication |
| /    | division       |
| abs  | absolute value |
| sqrt | square root    |

*** Predicates
| numberp | is a number?                                                  |
| symbolp | is a symbol?                                                  |
| zerop   | is zero?                                                      |
| oddp    | is odd?                                                       |
| evenp   | is even?                                                      |
| <       | is less than?                                                 |
| >       | is greater than?                                              |
| equal   | are equal?                                                    |
| not     | flip boolean value                                            |
| listp   | is a list?                                                    |
| consp   | is a cons cell?                                               |
| atom    | is atomic (number or symbol)                                  |
| null    | is null?                                                      |
| plusp   | is positive?                                                  |
| eq      | are the addresses the same? (symbols)                         |
| eql     | compares addresses and numbers of same type (default)         |
| =       | compares numbers (use in all cases)                           |
| equalp  | similar to equal but more liberal (ignores case for instance) |

*** List Functions
| first             | first element                                                                            |
| second            | second element                                                                           |
| third             | third element                                                                            |
| fourth            | fourth element                                                                           |
| rest              | all elements except the first                                                            |
| car               | analogous to first                                                                       |
| cdr               | analogous to rest                                                                        |
| cons              | create a cons cell with car and cdr inputs                                               |
| list              | create a list containing the inputs                                                      |
| length            | length of a list                                                                         |
| append            | returns the result of appending one list to another                                      |
| reverse           | returns the reverse of a list                                                            |
| nthcdr            | returns the nth cdr of a list                                                            |
| nth               | returns the nth car of a list                                                            |
| last              | returns the last cons cell of a list                                                     |
| remove            | returns a list with elements removed                                                     |
| member            | returns whether a set contains a value (and the sublist)                                 |
| intersection      | returns a set of items that appear in both sets                                          |
| union             | returns a set of items that appear in either set                                         |
| set-difference    | returns a set with the items in the second set removed from the first                    |
| subsetp           | returns whether a set is a subset of another set                                         |
| set-exclusive-or  | returns a set with the items that are NOT present in both sets.                          |
| remove-duplicates | returns a list with duplicates removed.                                                  |
| assoc             | returns the first entry in a list of lists ((k, v)) where the key matches                |
| rassoc            | returns the first entry in a list of lists ((k, v)) where the value matches              |
| subst             | substitutes one item for another everywhere in a list. returns the new list.             |
| sublis            | like subst, but multiple items. input is a dotted pair table.                            |
| mapcar            | applies a function to every element in a list and returns a list of results.             |
| find-if           | returns the first element in a list that satisfies a predicate                           |
| remove-if         | removes all elements of a list that satisfy a predicate                                  |
| remove-if-not     | removes all elements of a list that do not satisfy a predicate                           |
| every             | returns T if all elements of a list satisfy a predicate                                  |
| reduce            | uses a reducing function that takes adjacent elements to reduce a list to a single value |


*** Conditionals
| if   | 3 clauses: test statement, consequence, else      |
| cond | like a switch statement and can have many clauses |
| and  | returns NIL or the last non-NIL value             |
| or   | returns the first non-NIL value or NIL.           |

*** Creating local variables
| let  | create local variable(s) in a new lexical scope            |
| let* | like let, but required if variables have interdependencies |

*** Assignment
| setf | assign values to variables |

*** Keywords

Functions like member and remove that rely on equality use eql as the predicate by default.
An optional additional :test argument can be specified to change this:
e.g., (member '(5 diamonds) cards :test #'equal)

:test is also a keyword for the following functions: 
union, intersection, set-difference, assoc, rassoc, subst, and sublis.

mapcar and every do not accept any keyword arguments, but they can operate on multiple lists.


*** Defining a function
(defun name (args) body)
